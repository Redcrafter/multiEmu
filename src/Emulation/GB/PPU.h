#pragma once
#include <algorithm>
#include <cstdint>

#include "../../RenderImage.h"

namespace Gameboy {

static const uint8_t tileInit[] = {
	0xF0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xF3, 0xF3,
	0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C,
	0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0xF3, 0xF3,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0xCF,
	0x00, 0x00, 0x0F, 0x0F, 0x3F, 0x3F, 0x0F, 0x0F,
	0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x0F, 0x0F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xF3,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0,
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF,
	0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xC3,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC,
	0xF3, 0xF3, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0x3C, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0x3C, 0x3C,
	0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
	0xF3, 0xF3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
	0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
	0x3C, 0x3C, 0x3F, 0x3F, 0x3C, 0x3C, 0x0F, 0x0F,
	0x3C, 0x3C, 0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC,
	0xFC, 0xFC, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF0, 0xF0,
	0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF,
	0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xC3, 0xC3,
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFC, 0xFC,
	0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C
};
static const uint8_t mapInit[] = {
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	0x09, 0x0A, 0x0B, 0x0C, 0x19, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
	0x15, 0x16, 0x17, 0x18
};

struct Uhhh {
	uint8_t id;
	uint8_t palette;
	uint8_t priority;
	bool bgPpriority;
};

class Gameboy;

class PPU {
	friend class Gameboy;
	friend class GameboyColorCore;

  private:
	uint8_t VRAM[2][0x2000];
	uint8_t OAM[0xA0];

	uint16_t LX, LY;
	uint16_t windowCounter;

	union {
		struct {
			uint8_t modeFlag : 2;
			bool lycFlag : 1;

			bool hBlankInterrupt : 1;
			bool vBlankInterrupt : 1;
			bool oamInterrupt : 1;
			bool lycInterrupt : 1;
		};

		uint8_t reg;
	} STAT;

	union {
		struct {
			bool bgWindowEnable : 1;

			bool spriteEnable : 1;
			bool spriteSize : 1;

			bool tileMap : 1;
			bool tileData : 1;

			bool windowEnable : 1;
			bool windowTileMap : 1;

			bool lcdEnable : 1;
		};
		uint8_t reg;
	} Control;
	uint8_t SCX, SCY;
	uint8_t LYC;
	uint8_t BGP;
	uint8_t OBP0, OBP1;
	uint8_t WY, WX;

	uint8_t OPRI;

	std::array<uint8_t, 64> gbcBGP, gbcOBP;
	std::array<Uhhh, 160> drawBuffer;

  public:
	bool frameComplete = false;

	void Reset() {
		std::fill_n(&VRAM[0][0], sizeof(VRAM), 0);
		for(size_t i = 0; i < 200; i++) {
			VRAM[0][16 + i * 2] = tileInit[i];
		}
		std::copy_n(mapInit, sizeof(mapInit), &VRAM[0][0x1904]);

		Control.reg = 0x91; // FF40
		STAT.reg = 5;		// FF41
		SCY = 0;			// FF42
		SCX = 0;			// FF43
		LY = 0;				// FF44
		LYC = 0;			// FF45
		// DMA   			// FF46
		BGP = 0xFC;	 		// FF47
		OBP0 = 0xFF; 		// FF48
		OBP1 = 0xFF; 		// FF49
		WY = 0;		 		// FF4A
		WX = 0;		 		// FF4B

		// OPRI = 0;

		windowCounter = 0;
		LX = 0;
	}

	void Clock(Gameboy& bus, RenderImage& texture);

  private:
	void DrawBg(bool gbc);
	void DrawWindow(bool gbc);
	void DrawSprites(bool gbc);
};

}
